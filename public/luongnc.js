// Bi·∫øn global
let websocket = null;
let reconnectInterval = null;

// C·∫•u h√¨nh Firebase - THAY B·∫∞NG CONFIG C·ª¶A B·∫†N
const firebaseConfig = {
  apiKey: "AIzaSyBceqX7RLapoQoDxVoAFTz-cG6UvZyNhZs",
  authDomain: "esp32-duan.firebaseapp.com",
  databaseURL: "https://esp32-duan-default-rtdb.firebaseio.com",
  projectId: "esp32-duan",
  storageBucket: "esp32-duan.firebasestorage.app",
  messagingSenderId: "119386388188",
  appId: "1:119386388188:web:111bc15cba677d12092619",
  measurementId: "G-6T8ZG83NZR"
};

// Kh·ªüi t·∫°o Firebase
function initFirebase() {
    try {
        firebase.initializeApp(firebaseConfig);
        const db = firebase.database();
        
        // L·∫Øng nghe d·ªØ li·ªáu flowRate t·ª´ Firebase
        db.ref("flowRate").on("value", (snapshot) => {
            const value = snapshot.val();
            if (value !== null) {
                document.getElementById("flowValue").innerText = value.toFixed(2);
                updateFirebaseStatus(true);
                addLog("üìä Firebase: " + value.toFixed(2) + " L/min");
            }
        });
        
        // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi Firebase
        db.ref(".info/connected").on("value", (snapshot) => {
            const connected = snapshot.val();
            updateFirebaseStatus(connected);
            if (connected) {
                addLog("‚úÖ Firebase ƒë√£ k·∫øt n·ªëi");
            } else {
                addLog("‚ùå Firebase m·∫•t k·∫øt n·ªëi");
            }
        });
        
    } catch (error) {
        addLog("‚ùå L·ªói Firebase: " + error.message);
        updateFirebaseStatus(false);
    }
}

// H√†m k·∫øt n·ªëi WebSocket t·ªõi ESP32
function connectWebSocket() {
    const ip = document.getElementById('espIP').value.trim();
    if (!ip) {
        addLog("‚ö†Ô∏è Vui l√≤ng nh·∫≠p IP ESP32");
        return;
    }
    
    if (websocket && websocket.readyState === WebSocket.OPEN) {
        addLog("‚ÑπÔ∏è WebSocket ƒë√£ k·∫øt n·ªëi");
        return;
    }
    
    const wsUrl = `ws://${ip}/ws`;
    addLog("üîÑ ƒêang k·∫øt n·ªëi t·ªõi: " + wsUrl);
    
    try {
        websocket = new WebSocket(wsUrl);
        
        websocket.onopen = function(event) {
            addLog("‚úÖ WebSocket k·∫øt n·ªëi th√†nh c√¥ng!");
            updateWebSocketStatus(true);
            clearInterval(reconnectInterval);
        };
        
        websocket.onmessage = function(event) {
            addLog("üì© ESP32: " + event.data);
            
            // N·∫øu nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu s·ªë, c·∫≠p nh·∫≠t hi·ªÉn th·ªã
            const flowRate = parseFloat(event.data);
            if (!isNaN(flowRate)) {
                document.getElementById("flowValue").innerText = flowRate.toFixed(2);
            }
        };
        
        websocket.onclose = function(event) {
            addLog("‚ùå WebSocket ƒë√£ ƒë√≥ng (Code: " + event.code + ")");
            updateWebSocketStatus(false);
            
            // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
            reconnectInterval = setInterval(() => {
                addLog("üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...");
                connectWebSocket();
            }, 5000);
        };
        
        websocket.onerror = function(error) {
            addLog("‚ùå L·ªói WebSocket");
            updateWebSocketStatus(false);
        };
        
    } catch (error) {
        addLog("‚ùå Kh√¥ng th·ªÉ t·∫°o WebSocket: " + error.message);
        updateWebSocketStatus(false);
    }
}

// H√†m ng·∫Øt k·∫øt n·ªëi WebSocket
function disconnectWebSocket() {
    if (websocket) {
        websocket.close();
        clearInterval(reconnectInterval);
        addLog("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket");
    }
}

// H√†m g·ª≠i tin nh·∫Øn test
function sendTestMessage() {
    if (websocket && websocket.readyState === WebSocket.OPEN) {
        const message = "Test from web: " + new Date().toLocaleTimeString();
        websocket.send(message);
        addLog("üì§ ƒê√£ g·ª≠i: " + message);
    } else {
        addLog("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi");
    }
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i WebSocket UI
function updateWebSocketStatus(connected) {
    const indicator = document.getElementById('wsStatus');
    const text = document.getElementById('wsStatusText');
    
    if (connected) {
        indicator.className = 'status-indicator connected';
        text.textContent = 'ƒê√£ k·∫øt n·ªëi';
    } else {
        indicator.className = 'status-indicator disconnected';
        text.textContent = 'M·∫•t k·∫øt n·ªëi';
    }
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i Firebase UI
function updateFirebaseStatus(connected) {
    const indicator = document.getElementById('fbStatus');
    const text = document.getElementById('fbStatusText');
    
    if (connected) {
        indicator.className = 'status-indicator connected';
        text.textContent = 'ƒê√£ k·∫øt n·ªëi';
    } else {
        indicator.className = 'status-indicator disconnected';
        text.textContent = 'M·∫•t k·∫øt n·ªëi';
    }
}

// H√†m th√™m log v√†o UI
function addLog(message) {
    const logContainer = document.getElementById('logContainer');
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    logEntry.className = 'log-entry';
    logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span>${message}`;
    
    logContainer.appendChild(logEntry);
    logContainer.scrollTop = logContainer.scrollHeight;
    
    // Gi·ªõi h·∫°n s·ªë d√≤ng log (t·ªëi ƒëa 100)
    if (logContainer.children.length > 100) {
        logContainer.removeChild(logContainer.firstChild);
    }
}

// H√†m x√≥a log
function clearLog() {
    document.getElementById('logContainer').innerHTML = '';
    addLog("üóëÔ∏è Log ƒë√£ ƒë∆∞·ª£c x√≥a");
}

// Kh·ªüi t·∫°o khi trang load
window.onload = function() {
    addLog("üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông");
    addLog("‚ÑπÔ∏è Nh·∫≠p IP ESP32 v√† nh·∫•n 'K·∫øt n·ªëi ESP32'");
    
    // Kh·ªüi t·∫°o Firebase
    initFirebase();
};

// D·ªçn d·∫πp khi ƒë√≥ng trang  
window.onbeforeunload = function() {
    if (websocket) {
        websocket.close();
    }
};
